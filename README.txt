Cosine Distance Text Application by Darren McCartney
G00340711

This is a java application that allows users to input two text files and returns
a percentage value of similarity between the text content of the files, calculated 
using the cosine distance formula. When the application is run the user is prompted
to enter the file path for a query file. The user should enter the file path relative
to the current directory the application is being run from. This is repeated for a 
subject file to compare against the query file. The application will process the 
texts, calculate their similarity and display the percentage similarity of the two
texts.

The application consists of four classes, Menu, Parser, Calculator and Runner.

Menu provides the UI as a text based prompt to enter the file paths for a subject
and a query file, parses the words from the text file and prints out the calculated
percentage similarity. The percentage is returned initially as a double which is 
generated by cosine distance calculation and is then formatted into a percentage by
multiplying by 100 and displayed to two decimal places using an instance of 
DecimalFormat. This method of decimal formatting was implemented using the website
(https://mkyong.com/java/java-display-double-in-2-decimal-points/) (mkyong 2019).

Parser and it's method getMap() are the implementation for taking the inputed text 
files and returning them as a Map of Integer keys to Integer values allowing for easier
and more efficient calculation of the cosine distance. getMap() texts a text file path
as a String as a parameter and returns a Map<Integer, Integer> of the hashcode for each word
in the text as the key and the frequency of that word as a value. 

Calculator is the class which calculates the cosine distance using getSimilarity() which
takes two Map<Integer, Integer> parameters and returns a double between 0 and 1. 
This value between 0 and 1 is how similar the texts are with 1 being identical and 0
being no similarity at all. The dot product calculation was developed using code from
Nish Tahir (Tahir 2015) (https://blog.nishtahir.com/fuzzy-string-matching-using-cosine-similarity/)

Runner provides threading for the application and runs the entire system through it's 
main method. Using the go() method, Runner creates two separate threads so that both the
inputed texts can be parsed concurrently.

All four classes were created with help from an online meeting by Dr. John Healy of GMIT
on 2nd December 2020.